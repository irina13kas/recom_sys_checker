import subprocess
import os
import json
import tempfile
from typing import Dict

def run_pytest(task_info: Dict) -> str:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç pytest —Å –ø–µ—Ä–µ–¥–∞—á–µ–π task_info –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç.
    """
    test_file_map = {
        "collaborative": "logic/tests/collaborative_tests.py",
        "content_based": "logic/tests/content_based_tests.py",
        "hybrid": "logic/tests/hybrid_tests.py"
    }

    test_file = test_file_map.get(task_info["type"])
    with tempfile.NamedTemporaryFile(mode="w", suffix=".json", delete=False, encoding="utf-8") as temp_file:
        json.dump(task_info, temp_file)
        temp_path = temp_file.name

    try:
        result = subprocess.run(
            ["pytest", test_file, f"--task_info_path={temp_path}"],
            capture_output=True,
            text=True
        )
        error_lines = [
            line[8:] if line.startswith("E       ") else line
            for line in result.stdout.splitlines() + result.stderr.splitlines()
            if line.strip().startswith("E")
        ]

        error_lines = [line.encode().decode('unicode_escape') for line in error_lines]

        if result.returncode != 0 and error_lines:
            return "‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n" + "\n".join(error_lines)

        return "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
    finally:
        os.remove(temp_path)


def run_flake8(file_path="solutions/solution.py") -> str:
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è —Å –ø–æ–º–æ—â—å—é flake8 –¥–ª—è —Ñ–∞–π–ª–∞: {file_path}...")
    result = subprocess.run(
        ["flake8", file_path, "--ignore=W293"],
        capture_output=True,
        text=True
    )

    if result.returncode == 0:
        return "‚úÖ flake8: –°—Ç–∏–ª—å –∫–æ–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É.\n"
    else:
        return f"‚ùå flake8: –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∏–ª–µ–º:\n{result.stdout}"


def run_black_check(file_path="solutions/solution.py") -> str:
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é black –¥–ª—è —Ñ–∞–π–ª–∞: {file_path}...")
    result = subprocess.run(
        ["black", "--check", "--diff", file_path],
        capture_output=True,
        text=True,
        encoding="utf-8",
    )


    if result.returncode == 0:
        return "‚úÖ black: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ.\n"
    else:
        return (
            "‚ùå black: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ black.\n\n"
            "üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n"
             f"uYTYT^ {result.stdout}"
        )


def generate_report(task_info: Dict) -> str:
    print("üìã –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è...\n")
    report = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    functional_report = run_pytest(task_info)
    functional_report_str = str(functional_report) if functional_report is not None else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    report.append(f"üß™ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã\n{'-' * 30}\n{functional_report_str}")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞ flake8
    flake8_report = run_flake8()
    report.append("üé® –°—Ç–∏–ª—å –∫–æ–¥–∞ (flake8)\n" + "-" * 30 + "\n" + flake8_report)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ black
    black_report = run_black_check()
    report.append("üß± –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ (black)\n" + "-" * 30 + "\n" + black_report)

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    full_report = "\n\n".join(report)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n")

    return full_report
