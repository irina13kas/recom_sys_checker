import subprocess
import sys
import os
import json
from typing import Dict


def run_pytest(task_info: Dict) -> str:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç pytest —Å –ø–µ—Ä–µ–¥–∞—á–µ–π task_info –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç.
    """
    test_file_map = {
        "collaborative": "logic/tests/collaborative_tests.py",
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–¥ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π
    }

    test_file = test_file_map.get(task_info["type"])
    if not test_file or not os.path.exists(test_file):
        return f"[–û—à–∏–±–∫–∞] –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏: {task_info['type']}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º task_info –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã pytest –º–æ–≥ –µ–≥–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å

    task_info_str = json.dumps(task_info)

    env = os.environ.copy()
    env["TASK_INFO"] = task_info_str  # –ø–µ—Ä–µ–¥–∞—ë–º –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

    print(f"üîç –ó–∞–ø—É—Å–∫ pytest –¥–ª—è —Ñ–∞–π–ª–∞: {test_file}...")

    result = subprocess.run(
        [sys.executable, "-m", "pytest", test_file, "-v", "-rA"],
        text=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        env=env,
    )

    output = result.stdout

    report_lines = []
    #print("STDOUT:\n", result.stdout)

    
    for line in output.splitlines():
        if "PASSED" in line:
            test_name = line.split("::")[-1].split()[0]
            report_lines.append(f"‚úÖ PASSED: {test_name}")
        elif "FAILED" in line:
            test_name = line.split("::")[-1].split()[0]
            report_lines.append(f"‚ùå FAILED: {test_name}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫
            error_message = extract_error_message(output, line)
            print(f"ERROR: {error_message}")
            if error_message:
                report_lines.append(f"    –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")
            
            in_error = True

    return "\n".join(report_lines or ["‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"])

def extract_error_message(full_output, failed_line):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ —Å FAILED"""
    lines = full_output.splitlines()
    idx = lines.index(failed_line)
    
    # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–æ–π
    for i in range(idx+1, min(idx+100, len(lines))):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º 10 —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫
        print(f"!!!!! {lines[i]}")
        if "assert:" in lines[i]:
            return lines[i].split("assert:")[1].strip()
        if "assert       " in lines[i]:  # –°—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–æ–π –≤ pytest
            return lines[i][8:].strip()
    
    return None

def run_flake8(file_path="solutions/solution.py") -> str:
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è —Å –ø–æ–º–æ—â—å—é flake8 –¥–ª—è —Ñ–∞–π–ª–∞: {file_path}...")
    result = subprocess.run(
        ["flake8", file_path, "--ignore=W293"],
        capture_output=True,
        text=True
    )

    if result.returncode == 0:
        return "‚úÖ flake8: –°—Ç–∏–ª—å –∫–æ–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É.\n"
    else:
        return f"‚ùå flake8: –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∏–ª–µ–º:\n{result.stdout}"


def run_black_check(file_path="solutions/solution.py") -> str:
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é black –¥–ª—è —Ñ–∞–π–ª–∞: {file_path}...")
    result = subprocess.run(
        ["black", "--check", "--diff", file_path],
        capture_output=True,
        text=True,
        encoding="utf-8",
    )


    if result.returncode == 0:
        return "‚úÖ black: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ.\n"
    else:
        return (
            "‚ùå black: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ black.\n\n"
            "üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n"
             f"uYTYT^ {result.stdout}"
        )


def generate_report(task_info: Dict) -> str:
    print("üìã –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è...\n")
    report = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    functional_report = run_pytest(task_info)
    functional_report_str = str(functional_report) if functional_report is not None else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    report.append(f"üß™ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã\n{'-' * 30}\n{functional_report_str}")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞ flake8
    flake8_report = run_flake8()
    report.append("üé® –°—Ç–∏–ª—å –∫–æ–¥–∞ (flake8)\n" + "-" * 30 + "\n" + flake8_report)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ black
    black_report = run_black_check()
    report.append("üß± –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ (black)\n" + "-" * 30 + "\n" + black_report)

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    full_report = "\n\n".join(report)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n")

    return full_report
