import subprocess
import sys
import os
import json
import tempfile
from typing import Dict

def run_pytest(task_info: Dict) -> str:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç pytest —Å –ø–µ—Ä–µ–¥–∞—á–µ–π task_info –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç.
    """
    test_file_map = {
        "collaborative": "logic/tests/collaborative_tests.py",
    }

    test_file = test_file_map.get(task_info["type"])
    with tempfile.NamedTemporaryFile(mode="w", suffix=".json", delete=False, encoding="utf-8") as temp_file:
        json.dump(task_info, temp_file)
        temp_path = temp_file.name

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º pytest –∏ –ø–æ–ª—É—á–∞–µ–º stdout/stderr
        result = subprocess.run(
            ["pytest", test_file, f"--task_info_path={temp_path}"],
            capture_output=True,
            text=True
        )
        
        error_lines = [
            line[8:] if line.startswith("E       ") else line
            for line in result.stdout.splitlines() + result.stderr.splitlines()
            if line.strip().startswith("E")
        ]

        error_lines = [line.encode().decode('unicode_escape') for line in error_lines]

        if result.returncode != 0 and error_lines:
            return "‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n" + "\n".join(error_lines)

        return "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
    finally:
        os.remove(temp_path)

    #     output = result.stdout + "\n" + result.stderr

    #     # –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã —É–ø–∞–ª–∏ ‚Äî –∏—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç assert
    #     if result.returncode != 0:
    #         # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "‚ùå" –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ AssertionError
    #         for line in output.splitlines():
    #             if "‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω" in line:
    #                 return line + "\n"  # –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    #         # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –≤–µ—Ä–Ω—ë–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    #         return "‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n" + output

    #     return "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
    # finally:
    #     os.remove(temp_path)



# def extract_failure_details(full_output: str, test_name: str) -> str:
#     """
#     –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö.
#     –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
#     """
#     lines = full_output.splitlines()
#     collecting = False
#     error_lines = []
#     test_header = f"{test_name} FAILED"
    
#     for line in lines:
#         # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –æ—à–∏–±–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
#         if test_header in line:
#             collecting = True
#             continue
        
#         # –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç –∏–ª–∏ –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Å–±–æ—Ä
#         if collecting and ("====" in line or "FAILED" in line or "PASSED" in line or "logic/tests/" in line):
#             break
        
#         # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –æ—à–∏–±–∫–∏
#         if collecting and line.strip():
#             # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ pytest
#             clean_line = line.replace("E   ", "").strip()
#             if not clean_line.startswith((">", "_", "FAILED", "PASSED")):
#                 error_lines.append(clean_line)
    
#     # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ AssertionError, –∏–∑–≤–ª–µ–∫–∞–µ–º –µ–≥–æ
#     if error_lines:
#         for i, line in enumerate(error_lines):
#             if "AssertionError:" in line:
#                 # –ë–µ—Ä–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ AssertionError
#                 return "\n".join(error_lines[i:])
        
#         # –ï—Å–ª–∏ AssertionError –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
#         return "\n".join(error_lines)
    
#     # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –æ—à–∏–±–∫–∞ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
#     for i, line in enumerate(lines):
#         if test_header in line:
#             # –ò—â–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ FAILED
#             for next_line in lines[i+1:]:
#                 if next_line.strip() and not next_line.startswith(("_", ">", "E", "FAILED", "PASSED")):
#                     return next_line.strip()
    
#     return "–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω (–¥–µ—Ç–∞–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã)"

# def run_pytest(task_info: Dict) -> str:
#     """
#     –ó–∞–ø—É—Å–∫–∞–µ—Ç pytest —Å –ø–µ—Ä–µ–¥–∞—á–µ–π task_info –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
#     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç.
#     """
#     test_file_map = {
#         "collaborative": "logic/tests/collaborative_tests.py",
#     }

#     test_file = test_file_map.get(task_info["type"])
#     if not test_file or not os.path.exists(test_file):
#         return f"[–û—à–∏–±–∫–∞] –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏: {task_info['type']}"

#     # –ü–µ—Ä–µ–¥–∞–µ–º task_info —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
#     env = os.environ.copy()
#     env["TASK_INFO"] = json.dumps(task_info)

#     print(f"üîç –ó–∞–ø—É—Å–∫ pytest –¥–ª—è —Ñ–∞–π–ª–∞: {test_file}...")

#     result = subprocess.run(
#         [
#             sys.executable,
#             "-m", "pytest",
#             test_file,
#             "-v",
#             "--no-header",
#             "--no-summary",
#             "--tb=native",  # –ë–æ–ª–µ–µ —á–∏—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
#         ],
#         text=True,
#         stdout=subprocess.PIPE,
#         stderr=subprocess.PIPE,
#         env=env,
#         encoding="utf-8",
#         errors="replace",
#     )
#     output = result.stdout + "\n" + result.stderr
#     report_lines = []
    
#     # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Ç–µ—Å—Ç–∞—Ö
#     test_results = []
#     for line in output.splitlines():
#         if "logic/tests/" in line and ("PASSED" in line or "FAILED" in line):
#             parts = line.split("::")
#             test_name = parts[1].split()[0]
#             status = "PASSED" if "PASSED" in line else "FAILED"
#             test_results.append((test_name, status, line))
    
#     # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç
#     for test_name, status, raw_line in test_results:
#         if status == "FAILED":
#             error_msg = extract_failure_details(output, test_name)
            
#             # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
#             if "AssertionError:" in error_msg:
#                 error_msg = error_msg.split("AssertionError:")[1].strip()
            
#             report_lines.append(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {test_name}")
#             report_lines.append(f"   –û—à–∏–±–∫–∞: {error_msg}")
#             report_lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
#         else:
#             report_lines.append(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: {test_name}")

#     return "\n".join(report_lines)

def run_flake8(file_path="solutions/solution.py") -> str:
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è —Å –ø–æ–º–æ—â—å—é flake8 –¥–ª—è —Ñ–∞–π–ª–∞: {file_path}...")
    result = subprocess.run(
        ["flake8", file_path, "--ignore=W293"],
        capture_output=True,
        text=True
    )

    if result.returncode == 0:
        return "‚úÖ flake8: –°—Ç–∏–ª—å –∫–æ–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É.\n"
    else:
        return f"‚ùå flake8: –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∏–ª–µ–º:\n{result.stdout}"


def run_black_check(file_path="solutions/solution.py") -> str:
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é black –¥–ª—è —Ñ–∞–π–ª–∞: {file_path}...")
    result = subprocess.run(
        ["black", "--check", "--diff", file_path],
        capture_output=True,
        text=True,
        encoding="utf-8",
    )


    if result.returncode == 0:
        return "‚úÖ black: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ.\n"
    else:
        return (
            "‚ùå black: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ black.\n\n"
            "üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n"
             f"uYTYT^ {result.stdout}"
        )


def generate_report(task_info: Dict) -> str:
    print("üìã –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è...\n")
    report = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    functional_report = run_pytest(task_info)
    functional_report_str = str(functional_report) if functional_report is not None else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    report.append(f"üß™ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã\n{'-' * 30}\n{functional_report_str}")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞ flake8
    flake8_report = run_flake8()
    report.append("üé® –°—Ç–∏–ª—å –∫–æ–¥–∞ (flake8)\n" + "-" * 30 + "\n" + flake8_report)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ black
    black_report = run_black_check()
    report.append("üß± –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ (black)\n" + "-" * 30 + "\n" + black_report)

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    full_report = "\n\n".join(report)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n")

    return full_report
