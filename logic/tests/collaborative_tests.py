import pytest
import random
import os
import pandas as pd
import numpy as np
import importlib.util
from pathlib import Path
from sklearn.metrics import mean_squared_error

@pytest.fixture(params=[5, 42, 100, 250])
def generated_dataset(request, task_info):
    return get_dummy_data(task_info, seed=request.param)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥—É–ª—è ===
def test_solution_file_exists():
    assert os.path.exists("solutions/solution.py"), "–§–∞–π–ª 'solution.py' –Ω–µ –Ω–∞–π–¥–µ–Ω"

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è ===
def load_solution_module():
    path = Path("solutions/solution.py")
    spec = importlib.util.spec_from_file_location("solution", path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module

# === –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ===
def get_dummy_data(task_info, seed=None):
    if seed is not None:
        random.seed(seed)

    users = list(range(1, 21))
    items = list(range(100, 120))
    data = []
    if(task_info["filter_type"]=="item_based"):
        for user in users:
            rated_items = random.sample(items, k=random.randint(5, 10))
            for item in rated_items:
                rating = random.randint(1, 5)
                data.append((user, item, rating))
    else:
        for item in items:
            rated_users = random.sample(users, k=random.randint(3, 5))
            for user in rated_users:
                rating = random.randint(1, 5)
                data.append((user, item, rating))

    return pd.DataFrame(data, columns=['user_id', 'item', 'rating'])

# === –¢–µ—Å—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ===
def test_has_required_functions():
    solution = load_solution_module()
    assert hasattr(solution, 'fit'), "There is no fit"
    assert hasattr(solution, 'recommend'), "There is no recommend"
    assert hasattr(solution, 'evaluate'), "There is evaluate"

def test_fit_runs_without_error(task_info):
    sample_data = get_dummy_data(task_info)
    solution = load_solution_module()
    solution.fit(sample_data)

# === –¢–µ—Å—Ç—ã recommend –∏ fit ===
@pytest.mark.parametrize("k", [1, 2, 3])
def test_fit_and_recommend_on_generated(task_info,
                                         k, generated_dataset):
    solution = load_solution_module()

    solution.fit(generated_dataset)
    print(f"data: {generated_dataset}")
    user_id = generated_dataset["user_id"].iloc[0]
    recs = solution.recommend(user_id, k=k)
    assert isinstance(recs, list)
    assert len(recs)<= k, f"""
        ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:
        Data: {generated_dataset}
        Expected: {k}
        Actual: {len(recs)}
        """

    if task_info["filter_type"] == "user_based":
        user_2 = generated_dataset["user_id"].iloc[1]
        recs_2 = solution.recommend(user_2, k=k)

        recs = list(map(int, recs))
        recs_2 = list(map(int, recs_2))
        if sorted(recs) == sorted(recs_2):
            message = (
                f"‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç –¥–ª—è –¥–≤—É—Ö —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ user-based —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏."
                f"üë§ user_id 1: {user_id} ‚Üí recs: {recs}"
                f"üë§ user_id 2: {user_2} ‚Üí recs: {recs_2}"
                f"üìé Expected: —Ä–∞–∑–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                f"üìÇ Data:{generated_dataset[generated_dataset['user_id'].isin([user_id, user_2])]}"
            )
            raise AssertionError(message)
    elif task_info["filter_type"] == "item_based":
        seen_items = generated_dataset[generated_dataset["user_id"] == user_id]["item"].tolist()
        assert not any(item in seen_items for item in recs), (f"""
            ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: Item-based: –Ω–µ –¥–æ–ª–∂–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å—Å—è —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
            Data: {generated_dataset}
            Expected: {False}
            Actual: {True}
            """)
        
def test_recommend_items_not_seen(task_info, 
                                  generated_dataset):
    solution = load_solution_module()

    solution.fit(generated_dataset)

    user_id = generated_dataset["user_id"].iloc[0]
    seen_items = set(generated_dataset[generated_dataset["user_id"] == user_id]["item"])
    recs = solution.recommend(user_id=user_id, k=3)

    assert isinstance(recs, list)
    if task_info["filter_type"] == "item_based":
        # –í item-based –æ–±—è–∑–∞–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ item'—ã
        assert all(item not in seen_items for item in recs), (f"""
            ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: Item-based: –Ω–µ –¥–æ–ª–∂–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å—Å—è —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
            Data: {generated_dataset}
            Expected: {False}
            Actual: {True}
            """)
    elif task_info["filter_type"] == "user_based":
        # –í user-based –∏–Ω–æ–≥–¥–∞ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –Ω–∏—á–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ
        assert len(recs) > 0, (f"""
            ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: 
            Data: {generated_dataset}
            Expected: {"–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã"}
            Actual: {"–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π"}
            """)

def test_repeat_fit_stability(task_info, 
                              generated_dataset):
    solution = load_solution_module()
    solution.fit(generated_dataset)
    user_id = generated_dataset["user_id"].iloc[0]
    k = 3
    solution.fit(generated_dataset)
    recs_1 = solution.recommend(user_id, k)

    solution.fit(generated_dataset)
    recs_2 = solution.recommend(user_id, k)

    if task_info["filter_type"] == "user_based":
        assert sorted(recs_1) == sorted(recs_2), (f"""
            ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: User-based: —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ fit –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç
            Data: {generated_dataset}
            Expected: {"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"}
            Actual: {f"–í—ã—è–≤–ª–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ."
                    f"–†–µ–∫–æ–º–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ 1-–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {recs_1}"
                    f"–†–µ–∫–æ–º–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ 2-–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {recs_2}"}
            """)
    elif task_info["filter_type"] == "item_based":
        # –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Ä–∞–∑–Ω–∏—Ü—É ‚Äî item-based –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π
        assert len(set(recs_1) & set(recs_2)) > 1, (f"""
            ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: Item-based: —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            Data: {generated_dataset}
            Expected: {"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"}
            Actual: {f"–í—ã—è–≤–ª–µ–Ω–æ —Å–∏–ª—å–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ (–±–æ–ª–µ–µ 1 —ç–ª–µ–º–µ–Ω—Ç–∞)."
                     f"–†–µ–∫–æ–º–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ 1-–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {recs_1}"
                     f"–†–µ–∫–æ–º–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ 2-–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {recs_2}"}
            """)
# === –ú–µ—Ç—Ä–∏–∫–∏ ===

# === –¢–µ—Å—Ç precision@2 ===
def test_evaluate_precision_at_2(task_info,
                                  k=2):
    if task_info["metric"] != "precision@2":
        pytest.skip("–ú–µ—Ç—Ä–∏–∫–∞ –≤ –∑–∞–¥–∞–Ω–∏–∏ –Ω–µ precision@2")
    
    solution = load_solution_module()

    test = pd.DataFrame([
        {"user_id": 12, "item": 101, "rating": 5},  # —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π
        {"user_id": 13, "item": 100, "rating": 2},  # –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π
    ])

    solution.recommend = test["user_id"].values
    recs = test["user_id"].values
    relevant_items = {101}

    hits = len(set(recs) & relevant_items)
    expected = hits / k

    actual = solution.evaluate(test)

    assert isinstance(actual, float)
    assert abs(actual - expected) < 0.01, f"""
            ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –°–∏–ª—å–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ precision@2
            Data: {test}
            Expected: {expected}
            Actual: {actual}
            """

# === –¢–µ—Å—Ç RMSE ===
def test_evaluate_returns_correct_rmse(task_info, 
                                       generated_dataset):
    if task_info["metric"] != "RMSE":
        pytest.skip("–ú–µ—Ç—Ä–∏–∫–∞ –≤ –∑–∞–¥–∞–Ω–∏–∏ –Ω–µ RMSE")
    
    solution = load_solution_module()
    dummy_data = generated_dataset
    train = dummy_data.sample(frac=0.7, random_state=42)
    test = dummy_data.drop(train.index)
    solution.fit(train)

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ RMSE (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ baseline)
    merged = pd.merge(test, train, on=["user_id", "item"], suffixes=("_test", "_train"))
    if not merged.empty:
        expected = np.sqrt(mean_squared_error(merged["rating_test"], merged["rating_train"]))
    else:
        expected = 0.0

    actual = solution.evaluate(test)
    assert abs(actual-expected) < 0.1, f"""
    ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –°–∏–ª—å–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ RMSE
    Data: {generated_dataset}
    Expected: {expected}
    Actual: {actual}
    """

# === –¢–µ—Å—Ç recall@3 ===
def test_evaluate_recall_at_3(task_info,
                               k = 3):
    if task_info["metric"] != "recall@3":
        pytest.skip("–ú–µ—Ç—Ä–∏–∫–∞ –≤ –∑–∞–¥–∞–Ω–∏–∏ –Ω–µ recall@3")

    solution = load_solution_module()

    test = pd.DataFrame([
        {"user_id": 12, "item": 115, "rating": 4}, # —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π
        {"user_id": 13, "item": 116, "rating": 5}, # —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π
        {"user_id": 14, "item": 117, "rating": 2},  # –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π
    ])
    solution.fit(test)
    relevant = [115, 116]
    expected = len(set(test) & set(relevant))/len(relevant)
    actual = solution.evaluate(test)
    assert isinstance(actual, float)
    assert abs(actual - expected) < 0.01, (f"""
            ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –°–∏–ª—å–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ recall@3
            Data: {test}
            Expected: {expected}
            Actual: {actual}
            """)
