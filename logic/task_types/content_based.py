import random
from typing import Tuple, Dict


class ContentBasedTaskGenerator:
    def __init__(self):   
        self.algorithms = ["TF-IDF", "count-based", "cosine similarity"]
        self.metric = ["precision@5", "recall@5", "NDCG"]
        self.algorithm_metric_map = {
            "TF-IDF": ["NDCG", "precision@5"],
            "count-based": ["recall@5","precision@5"],
            "cosine similarity": ["NDCG","precision@5"]
        }
        self.datasets = ["movies_content.csv"]#, "video_game_content.csv"])

    def generate_task(self) -> Tuple[str, Dict]:

        algorithm = random.choice(self.algorithms)
        metric = random.choice(self.algorithm_metric_map[algorithm])
        dataset = random.choice(self.datasets)

        task_text = f"""–¢–∏–ø –∑–∞–¥–∞—á–∏: –ö–æ–Ω—Ç–µ–Ω—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞

            üìò –û–ø–∏—Å–∞–Ω–∏–µ:
            –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ {algorithm}.
            –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —ç–ª–µ–º–µ–Ω—Ç—ã.

            üìÇ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
            - –î–∞—Ç–∞—Å–µ—Ç: `{dataset}`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π `movie_id`, `title`, `genres`.
            - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è ‚Äî –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.

            üéØ –¶–µ–ª—å:
            –û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç—Ä–∏–∫–∏ **{metric}**.

            ‚úîÔ∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–æ–¥–∞:
            - –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:

            def fit(train_data: pd.DataFrame) -> None:
                \"\"\"–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö.\"\"\"

            def recommend(movie_id: int, k = 5) -> List[int]:
                \"\"\"–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ k —Ñ–∏–ª—å–º–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –≤–º–µ—Å—Ç–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å–º–æ–º movie_id.\"\"\"

            def evaluate(test_data: pd.DataFrame, relevant_genres = 'Crime') -> float:
                \"\"\"–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, precision@5).\"\"\"

            üìé –£—Å–ª–æ–≤–∏—è:
            –†–µ—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ solution.py.

            –†–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: pandas, numpy, sklearn."""
        
        task_info = {
            "type": "content_based",
            "algorithm": algorithm,
            "metric": metric,
            "dataset": dataset
            }

        return task_text, task_info