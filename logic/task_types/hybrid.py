import random
from typing import Tuple, Dict

def generate() -> Tuple[str, Dict]:
    cf_part = random.choice(["SVD", "ALS"])
    cb_part = random.choice(["TF-IDF", "count-based"])
    strategy = random.choice(["–≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ", "—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ", "–º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∏—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—é"])
    metric = random.choice(["precision@5", "recall@5", "RMSE"])
    dataset = random.choice(["hybrid_movies.csv", "hybrid_books.csv"])

    task_text = f"""–¢–∏–ø –∑–∞–¥–∞—á–∏: –ì–∏–±—Ä–∏–¥–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞

        üìò –û–ø–∏—Å–∞–Ω–∏–µ:
        –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≥–∏–±—Ä–∏–¥–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –æ–±—ä–µ–¥–∏–Ω—è—é—â—É—é:
        - –ö–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω—É—é —á–∞—Å—Ç—å: {cf_part} (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏)
        - –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—É—é —á–∞—Å—Ç—å: {cb_part} (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤)

        –ú–µ—Ç–æ–¥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: **{strategy}**.

        üìÇ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
        - –î–∞—Ç–∞—Å–µ—Ç: `{dataset}`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π `user_id`, `item_id`, `rating`, `title`, `description`.

        üéØ –¶–µ–ª—å:
        –û—Ü–µ–Ω–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é –º–µ—Ç—Ä–∏–∫–∏ **{metric}** (–Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏).

        ‚úîÔ∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–æ–¥–∞:
        - –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:

        ```python
        def fit(train_data: pd.DataFrame) -> None:
            \"\"\"–û–±—É—á–∞–µ—Ç –æ–±–µ —á–∞—Å—Ç–∏ –º–æ–¥–µ–ª–∏: –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω—É—é –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—É—é.\"\"\"

        def predict(user_id: int, item_id: int) -> float:
            \"\"\"–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id –¥–ª—è item_id.\"\"\"
        üìé –£—Å–ª–æ–≤–∏—è:

        –†–µ—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ solution.py.

        –†–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: pandas, numpy, sklearn, surprise, lightfm.
        """
    task_info = {
        "type": "hybrid",
        "cf_algorithm": cf_part,
        "cb_algorithm": cb_part,
        "combination_strategy": strategy,
        "metric": metric,
        "dataset": dataset
        }

    return task_text, task_info