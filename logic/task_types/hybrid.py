import random
from typing import Tuple, Dict

class HybridTaskGenerator:
    def __init__(self):
        self.cf_parts = ["SVD", "ALS"]
        self.cb_parts = ["TF-IDF", "count-based"]
        self.metrics = ["precision@5", "recall@5", "RMSE"]
        self.datasets = ["fashion_products.csv"]
    
    def generate_task(self) -> Tuple[str, Dict]:

        cf_part = random.choice(self.cf_parts)
        cb_part = random.choice(self.cb_parts)
        metric = random.choice(self.metrics)
        dataset = random.choice(self.datasets)

        task_text = f"""–¢–∏–ø –∑–∞–¥–∞—á–∏: –ì–∏–±—Ä–∏–¥–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞

            üìò –û–ø–∏—Å–∞–Ω–∏–µ:
            –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≥–∏–±—Ä–∏–¥–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –æ–±—ä–µ–¥–∏–Ω—è—é—â—É—é:
            - –ö–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω—É—é —á–∞—Å—Ç—å user_based: {cf_part} (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏)
            - –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—É—é —á–∞—Å—Ç—å: {cb_part} (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤)

            üìÇ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
            - –î–∞—Ç–∞—Å–µ—Ç: `{dataset}`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π `user_id`, `product_id`, `product_name`, `brand`, `category`,
            `price`, `rating`, `color`, `size`.

            üéØ –¶–µ–ª—å:
            –û—Ü–µ–Ω–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é –º–µ—Ç—Ä–∏–∫–∏ **{metric}** (–Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏).

            ‚úîÔ∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–æ–¥–∞:
            - –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:

            def fit(train_data: pd.DataFrame) -> None:
                \"\"\"–û–±—É—á–∞–µ—Ç –æ–±–µ —á–∞—Å—Ç–∏ –º–æ–¥–µ–ª–∏: –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω—É—é –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—É—é.\"\"\"

            def recommend(user_id: int, k = 5) -> List[int]:
                \"\"\"–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ k item_id, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\"\"\"
            
            def evaluate(test_data: pd.DataFrame, relevant_rating = 4, brand = 'Gucci') -> float:
                \"\"\"–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, RMSE, precision@5).\"\"\"
            üìé –£—Å–ª–æ–≤–∏—è:

            –†–µ—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ solution.py.

            –†–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: pandas, numpy, sklearn, surprise, lightfm.
            """
        task_info = {
            "type": "hybrid",
            "cf_algorithm": cf_part,
            "cb_algorithm": cb_part,
            "metric": metric,
            "dataset": dataset
            }

        return task_text, task_info