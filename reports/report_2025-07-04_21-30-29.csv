message
üß™ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
------------------------------
‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!
""
üé® –°—Ç–∏–ª—å –∫–æ–¥–∞ (flake8)
------------------------------
‚ùå flake8: –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∏–ª–µ–º:
"solutions/solution.py:13:1: E302 expected 2 blank lines, found 1"
"solutions/solution.py:33:1: E302 expected 2 blank lines, found 1"
solutions/solution.py:45:80: E501 line too long (83 > 79 characters)
solutions/solution.py:46:80: E501 line too long (82 > 79 characters)
"solutions/solution.py:50:1: E302 expected 2 blank lines, found 1"
solutions/solution.py:54:80: E501 line too long (102 > 79 characters)
solutions/solution.py:61:28: E225 missing whitespace around operator
solutions/solution.py:72:1: W391 blank line at end of file
""
""
üß± –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ (black)
------------------------------
‚ùå black: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ black.
""
üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:
uYTYT^ --- solutions\solution.py	2025-07-04 18:30:27.890672+00:00
+++ solutions\solution.py	2025-07-04 18:30:29.900838+00:00
"@@ -8,29 +8,31 @@"
 tfidf_matrix = None
 movie_ids = []
 movie_index = {}
 similarity_matrix = None
 
+
 def fit(train_data: pd.DataFrame) -> None:
"     """""""
     –û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö.
"     """""""
"     global tfidf_matrix, movie_ids, movie_index, similarity_matrix"
 
     # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º movie_ids –∏ –∏–Ω–¥–µ–∫—Å—ã
-    movie_ids = train_data['movie_id'].tolist()
"+    movie_ids = train_data[""movie_id""].tolist()"
"     movie_index = {movie_id: idx for idx, movie_id in enumerate(movie_ids)}"
 
     # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∂–∞–Ω—Ä—ã –≤ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
-    genre_texts = train_data['genres'].fillna('').astype(str)
"+    genre_texts = train_data[""genres""].fillna("""").astype(str)"
 
     # –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é TF-IDF
-    vectorizer = TfidfVectorizer(token_pattern=r'[^|]+')
"+    vectorizer = TfidfVectorizer(token_pattern=r""[^|]+"")"
     tfidf_matrix = vectorizer.fit_transform(genre_texts)
 
     # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Ñ–∏–ª—å–º–∞–º–∏
     similarity_matrix = cosine_similarity(tfidf_matrix)
+
 
" def recommend(movie_id: int, k: int) -> List[int]:"
"     """""""
"     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ k —Ñ–∏–ª—å–º–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É"
     –≤–º–µ—Å—Ç–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å–º–æ–º movie_id.
"@@ -38,35 +40,37 @@"
     if movie_id not in movie_index:
         return []
 
     idx = movie_index[movie_id]
     similarity_scores = list(enumerate(similarity_matrix[idx]))
-    
+
"     # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ö–æ–∂–µ—Å—Ç–∏, –∏—Å–∫–ª—é—á–∞—è —Å–∞–º —Ñ–∏–ª—å–º"
"     similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)"
"     recommended = [movie_ids[i] for i, score in similarity_scores if i != idx][:k]"
-    
+
     return recommended
 
"-def evaluate(test_data: pd.DataFrame, relevant_genres=['Crime']) -> float:"
+
"+def evaluate(test_data: pd.DataFrame, relevant_genres=[""Crime""]) -> float:"
"     """""""
     –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç precision@5.
"     """""""
"-    relevant_movies = test_data[test_data['genres'].str.contains('|'.join(relevant_genres), na=False)]"
-    relevant_movie_ids = set(relevant_movies['movie_id'])
+    relevant_movies = test_data[
"+        test_data[""genres""].str.contains(""|"".join(relevant_genres), na=False)"
+    ]
"+    relevant_movie_ids = set(relevant_movies[""movie_id""])"
 
     precision_scores = []
 
-    for movie_id in test_data['movie_id']:
"+    for movie_id in test_data[""movie_id""]:"
"         recommended = recommend(movie_id, 5)"
-        if len(recommended)==0:
-            print('mmm')
+        if len(recommended) == 0:
"+            print(""mmm"")"
             continue
         hits = sum(1 for rec_id in recommended if rec_id in relevant_movie_ids)
         precision = hits / 5
         precision_scores.append(precision)
     print(precision_scores)
     if not precision_scores:
         return 0.0
 
     return np.mean(precision_scores)
-
