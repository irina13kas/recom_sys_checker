import sys
from pathlib import Path
sys.path.append(str(Path(__file__).resolve().parent.parent))

import streamlit as st
from controller import TaskService
import os

if 'service' not in st.session_state:
    st.session_state.service = TaskService()

service = st.session_state.service

# –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
st.set_page_config(page_title="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", layout="centered")

# 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è
st.title("üéØ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ")

if "task_info" not in st.session_state:
    st.session_state.task_info = None
if "task_text" not in st.session_state:
    st.session_state.task_text = ""
if "uploaded_solution_path" not in st.session_state:
    st.session_state.uploaded_solution_path = ""

if st.button("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"):
    task_text, task_info = service.generate_task()
    st.session_state.task_text = task_text
    st.session_state.task_info = task_info
    service.task_info = st.session_state.task_info
    service.task_text = st.session_state.task_text

# 2. –í—ã–≤–æ–¥ –∑–∞–¥–∞–Ω–∏—è
if st.session_state.task_text:
    st.markdown("### üìù –ó–∞–¥–∞–Ω–∏–µ")
    st.markdown(st.session_state.task_text)
    
    with open("template/solution.py", "rb") as f:
        template_bytes = f.read()

    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω solution.py",
        data=template_bytes,
        file_name="solution.py",
        mime="text/x-python"
    )

    dataset_path = "logic/datasets/" + st.session_state.task_info["dataset"]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(dataset_path):
        with open(dataset_path, "rb") as f:
            data = f.read()
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç",
            data=data,
            file_name=os.path.basename(dataset_path),
            mime="text/csv"
        )
    else:
        st.error("–§–∞–π–ª –¥–∞—Ç–∞—Å–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")


# 3. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
if st.session_state.task_info:
    st.markdown("---")
    st.markdown("### üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–≤–æ–π `solution.py`")

    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª solution.py", type=["py"])

    if uploaded_file:
        
        # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –≤ —Å–µ—Å—Å–∏—é –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞ –¥–∏—Å–∫
        # –ü—Ä–∏–º–µ—Ä - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:
        save_path = os.path.join("solutions/", uploaded_file.name)
        os.makedirs("solutions", exist_ok=True)
        with open(save_path, "wb") as f:
            f.write(uploaded_file.getbuffer())

        service.upload_solution(uploaded_file)

        st.session_state.uploaded_solution_path = save_path
        st.success(f"–§–∞–π–ª {uploaded_file.name} –∑–∞–≥—Ä—É–∂–µ–Ω!")


# 4. –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ 5. –û—Ç—á–µ—Ç
if st.session_state.uploaded_solution_path:
    if st.button("üöÄ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ"):
        report = service.validate_solution()
        csv_path = service.export_report(report)

        st.session_state.report_text = report
        st.session_state.report_csv_path = csv_path

        st.markdown("### üìä –û—Ç—á–µ—Ç –ø–æ —Ä–µ—à–µ–Ω–∏—é")
        st.code(report, language="markdown")

        if st.session_state.get("report_csv_path"):
            with open(st.session_state.report_csv_path, "rb") as f:
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (.csv)",
                    data=f.read(),
                    file_name=Path(st.session_state.report_csv_path).name,
                    mime="text/csv"
                )