import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
from pathlib import Path
import shutil
import subprocess
import sys
import webbrowser
from pathlib import Path


sys.path.append(str(Path(__file__).resolve().parent.parent))
# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===

class ValidatorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üéì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
        self.root.geometry("1000x800")

        self.solution_loaded = False

        # –ö–Ω–æ–ø–∫–∞: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
        self.task_btn = tk.Button(root, text="üìò –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", command=self.generate_task)
        self.task_btn.pack(pady=10)

        # –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
        self.task_text = scrolledtext.ScrolledText(root, height=12, wrap=tk.WORD)
        self.task_text.pack(padx=10, fill=tk.BOTH)
        self.task_text.insert(tk.END, "–ó–∞–¥–∞–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...")
        self.task_text.config(state=tk.DISABLED)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—à–µ–Ω–∏—è
        self.upload_btn = tk.Button(root, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª solution.py", command=self.upload_solution)
        self.upload_btn.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏)
        self.validate_btn = tk.Button(root, text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", state=tk.DISABLED, command=self.run_validator)
        self.validate_btn.pack(pady=5)

        # –û—Ç—á—ë—Ç
        self.report_text = scrolledtext.ScrolledText(root, height=10, wrap=tk.WORD)
        self.report_text.pack(padx=10, pady=10, fill=tk.BOTH)
        self.report_text.insert(tk.END, "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        self.report_text.config(state=tk.DISABLED)

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç
        self.save_btn = tk.Button(root, text="üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç CSV", state=tk.DISABLED, command=self.save_report)
        self.save_btn.pack(pady=10)

    def generate_task(self):
        from logic.task_types.collaborative import CollaborativeTaskGenerator

        generator = CollaborativeTaskGenerator()
        task_text, task_info = generator.generate_task()

        with open("task_info.json", "w", encoding="utf-8") as f:
            import json
            json.dump(task_info, f, indent=2, ensure_ascii=False)

        self.task_text.config(state=tk.NORMAL)
        self.task_text.delete("1.0", tk.END)
        self.task_text.insert(tk.END, task_text.strip())
        self.task_text.config(state=tk.DISABLED)
        
        dataset_file = Path("logic/datasets/collaborative") / task_info["dataset"]
        print(dataset_file)
        if dataset_file.exists():
            if hasattr(self, "dataset_link"):
                self.dataset_link.config(
                    text=f"üìÅ –û—Ç–∫—Ä—ã—Ç—å –¥–∞—Ç–∞—Å–µ—Ç: {dataset_file.name}",
                    fg="blue",
                    cursor="hand2"
                )
                self.dataset_link.bind("<Button-1>", lambda e: webbrowser.open(dataset_file.resolve().as_uri()))
            else:
                self.dataset_link = tk.Label(self.root, text=f"üìÅ –û—Ç–∫—Ä—ã—Ç—å –¥–∞—Ç–∞—Å–µ—Ç: {dataset_file.name}",
                                            fg="blue", cursor="hand2", font=("Arial", 10, "underline"))
                self.dataset_link.pack(pady=5)
                self.dataset_link.bind("<Button-1>", lambda e: webbrowser.open(dataset_file.resolve().as_uri()))
        else:
            if hasattr(self, "dataset_link"):
                self.dataset_link.config(text="‚ùå –î–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", fg="red", cursor="arrow")
            else:
                self.dataset_link = tk.Label(self.root, text="‚ùå –î–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", fg="red")
                self.dataset_link.pack(pady=5)
            
        messagebox.showinfo("‚úÖ –£—Å–ø–µ—à–Ω–æ", "–ó–∞–¥–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")

    def upload_solution(self):
        file_path = filedialog.askopenfilename(filetypes=[("Python file", "*.py")])
        if file_path:
            try:
                shutil.copy(file_path, "solution.py")
                self.solution_loaded = True
                self.validate_btn.config(state=tk.NORMAL)
                messagebox.showinfo("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ", "–§–∞–π–ª solution.py –∑–∞–≥—Ä—É–∂–µ–Ω.")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª:\n{e}")

    def run_validator(self):
        self.report_text.config(state=tk.NORMAL)
        self.report_text.delete("1.0", tk.END)
        self.report_text.insert(tk.END, "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...\n")
        self.report_text.update()

        result = subprocess.run(["python", "logic/validator.py"], capture_output=True, text=True)
        if result.returncode == 0:
            self.report_text.insert(tk.END, "\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.\n\n")
        else:
            self.report_text.insert(tk.END, "\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏.\n\n")
            self.report_text.insert(tk.END, result.stderr)

        # –í—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ .csv
        csv_path = Path("validation_report.csv")
        if csv_path.exists():
            with open(csv_path, encoding="utf-8") as f:
                self.report_text.insert(tk.END, f.read())
                self.save_btn.config(state=tk.NORMAL)
        else:
            self.report_text.insert(tk.END, "‚ö†Ô∏è –û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        self.report_text.config(state=tk.DISABLED)

    def save_report(self):
        file = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV file", "*.csv")])
        if file:
            try:
                shutil.copy("validation_report.csv", file)
                messagebox.showinfo("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç:\n{e}")


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    root = tk.Tk()
    app = ValidatorGUI(root)
    root.mainloop()
